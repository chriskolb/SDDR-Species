% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods.R
\name{plot.deepregression}
\alias{plot.deepregression}
\alias{prepare_data}
\alias{predict.deepregression}
\alias{predict.deeptrafo}
\alias{fitted.deepregression}
\alias{fit.deepregression}
\alias{coef.deepregression}
\alias{print.deepregression}
\alias{cv}
\alias{mean.deepregression}
\alias{sd.deepregression}
\alias{quantile.deepregression}
\title{Generic functions for deepregression models}
\usage{
\method{plot}{deepregression}(
  x,
  which = NULL,
  which_param = 1,
  plot = TRUE,
  use_posterior = FALSE,
  grid_length = 40,
  ...
)

prepare_data(x, data, pred = TRUE)

\method{predict}{deepregression}(
  object,
  newdata = NULL,
  apply_fun = tfd_mean,
  convert_fun = as.matrix,
  ...
)

\method{predict}{deeptrafo}(object, newdata = NULL, ...)

\method{fitted}{deepregression}(object, apply_fun = tfd_mean, ...)

\method{fit}{deepregression}(
  x,
  early_stopping = FALSE,
  verbose = TRUE,
  view_metrics = FALSE,
  patience = 20,
  save_weights = FALSE,
  auc_callback = FALSE,
  val_data = NULL,
  callbacks = list(),
  ...
)

\method{coef}{deepregression}(object, variational = FALSE, ...)

\method{print}{deepregression}(x, ...)

cv(
  x,
  verbose = FALSE,
  patience = 20,
  plot = TRUE,
  print_folds = TRUE,
  cv_folds = NULL,
  stop_if_nan = TRUE,
  mylapply = lapply,
  save_weights = FALSE,
  ...
)

\method{mean}{deepregression}(x, data, ...)

\method{sd}{deepregression}(x, data, ...)

\method{quantile}{deepregression}(x, data, value, ...)
}
\arguments{
\item{x}{a deepregression object}

\item{which}{which effect to plot, default selects all.}

\item{which_param}{integer of length 1.
Corresponds to the distribution parameter for 
which the effects should be plotted.}

\item{plot}{whether to plot the resulting losses in each fold}

\item{use_posterior}{logical; if \code{TRUE} it is assumed that
the strucuted_nonlinear layer has stored a list of length two
as weights, where the first entry is a vector of mean and sd
for each network weight. The sd is transformed using the \code{exp} function.
The plot then shows the mean curve +- 2 times sd.}

\item{grid_length}{the length of an equidistant grid at which a two-dimensional function
is evaluated for plotting.}

\item{...}{arguments passed to the \code{predict} function}

\item{data}{either \code{NULL} or a new data set}

\item{pred}{logical, where the data corresponds to a prediction task}

\item{object}{a deepregression model}

\item{newdata}{optional new data, either data.frame or list}

\item{apply_fun}{function applied to fitted distribution,
per default \code{tfd_mean}}

\item{convert_fun}{how should the resulting tensor be converted,
per default \code{as.matrix}}

\item{early_stopping}{logical, whether early stopping should be user.}

\item{verbose}{whether to print training in each fold}

\item{view_metrics}{logical, whether to trigger the Viewer in RStudio / Browser.}

\item{patience}{number of patience for early stopping}

\item{save_weights}{logical, whether to save weights in each epoch.}

\item{auc_callback}{logical, whether to use a callback for AUC}

\item{val_data}{optional specified validation data}

\item{callbacks}{a list of callbacks for fitting}

\item{variational}{logical, if TRUE, the function takes into account
that coefficients have both a mean and a variance}

\item{print_folds}{whether to print the current fold}

\item{cv_folds}{see \code{deepregression}}

\item{stop_if_nan}{logical; whether to stop CV if NaN values occur}

\item{mylapply}{lapply function to be used; defaults to \code{lapply}}

\item{value}{the quantile value(s)}
}
\value{
returns a function with two parameters: the actual response
and \code{type} in \code{c('trafo', 'pdf', 'cdf')} determining the
returned value

Returns an object \code{drCV}, a list, one list element for each fold
containing the model fit and the \code{weighthistory}.
}
\description{
Generic functions for deepregression models

Function to prepare data for deepregression use

Predict based on a deepregression object

Predict based on a deeptrafo object

Function to extract fitted distribution

Fit a deepregression model

Extract layer weights / coefficients from model

Print function for deepregression model

Cross-validation for deepgression objects

mean of model fit

Standard deviation of fit distribution

Calculate the distribution quantiles
}
